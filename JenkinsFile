pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Fetch code from SCM') {
      steps {
        echo 'Pulled code from SCM'
       // git branch: 'master', url: 'https://github.com/Teja-Chittamuri/Java-springboot-appcode.git'
      }
    }
    stage('Build and Test') {
      steps {
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.57.245.65:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "tejachittamuri/springbootappcicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerlogin')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerlogin") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Java-springboot-appcode"
            GIT_USER_NAME = "Teja-Chittamuri"
        }
        steps {
            withCredentials([string(credentialsId:'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "tejschittamuri@gmail.com"
                    git config user.name "Teja Chittamuri"
                    cat spring-boot-appmanifest/deployment.yaml
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i 's/replaceImageTag/${BUILD_NUMBER}/g' spring-boot-appmanifest/deployment.yaml
                    cat spring-boot-appmanifest/deployment.yaml
                    git add spring-boot-appmanifest/deployment.yaml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                '''
            }
        }
    }

  }
  post {
        always {
            slackSend (color: '#36a64f', message: "Build Status: ${currentBuild.currentResult}", tokenCredentialId: 'slack-token') 
        }
        success {
            slackSend (color: '#36a64f', message: "Build Succeeded: ${env.BUILD_URL} ${env.BUILD_NUMBER}", tokenCredentialId: 'slack-token')
        }
        failure {
            slackSend (color: '#ff0000', message: "Build Failed: ${env.BUILD_URL}  ${env.BUILD_NUMBER}", tokenCredentialId: 'slack-token')
        }
    }
}
